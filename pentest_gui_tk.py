#!/usr/bin/env python3
"""
Modern Penetration Testing GUI using Tkinter
Works with all Python versions - no external GUI dependencies needed
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import sys
import os
import json
import threading
import subprocess
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
import queue

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Try to import framework modules
try:
    from src.config import Config
    from src.reconnaissance import ReconnaissanceModule
    from src.vulnerability_scanner import VulnerabilityScanner
    from src.network_assessor import NetworkAssessor
    from src.web_assessor import WebAssessor
    from src.mobile_assessor import MobileAssessor
    from src.wireless_assessor import WirelessAssessor
    from src.exploit_module import ExploitModule
    from src.copilot import copilot_run
    FRAMEWORK_AVAILABLE = True
except ImportError as e:
    print(f"Some framework modules not available: {e}")
    FRAMEWORK_AVAILABLE = False
    
    # Mock for demo
    class Config:
        OUTPUT_DIR = Path("./reports")
        @classmethod
        def create_output_dirs(cls): 
            cls.OUTPUT_DIR.mkdir(exist_ok=True)

class ModernTheme:
    """Modern dark theme colors"""
    # Dark theme colors
    BG_PRIMARY = "#0d1117"
    BG_SECONDARY = "#161b22"
    BG_TERTIARY = "#1c2128"
    
    # Text colors
    FG_PRIMARY = "#c9d1d9"
    FG_SECONDARY = "#8b949e"
    FG_MUTED = "#484f58"
    
    # Accent colors
    ACCENT_PRIMARY = "#58a6ff"
    ACCENT_SUCCESS = "#3fb950"
    ACCENT_WARNING = "#d29922"
    ACCENT_DANGER = "#f85149"
    
    # Border colors
    BORDER = "#30363d"
    BORDER_LIGHT = "#484f58"
    
    @classmethod
    def apply_theme(cls, root):
        """Apply dark theme to tkinter widgets"""
        style = ttk.Style(root)
        style.theme_use('clam')
        
        # Configure ttk styles
        style.configure("TLabel", 
                       background=cls.BG_PRIMARY, 
                       foreground=cls.FG_PRIMARY,
                       font=('Segoe UI', 10))
        
        style.configure("Title.TLabel",
                       font=('Segoe UI', 14, 'bold'))
        
        style.configure("TButton",
                       background=cls.ACCENT_PRIMARY,
                       foreground="white",
                       borderwidth=0,
                       focuscolor='none',
                       font=('Segoe UI', 10, 'bold'))
        
        style.map("TButton",
                 background=[('active', cls.ACCENT_SUCCESS)])
        
        style.configure("Danger.TButton",
                       background=cls.ACCENT_DANGER)
        
        style.configure("Success.TButton",
                       background=cls.ACCENT_SUCCESS)
        
        style.configure("TFrame",
                       background=cls.BG_PRIMARY,
                       borderwidth=0)
        
        style.configure("Card.TFrame",
                       background=cls.BG_SECONDARY,
                       relief="flat",
                       borderwidth=1)
        
        style.configure("TNotebook",
                       background=cls.BG_PRIMARY,
                       borderwidth=0)
        
        style.configure("TNotebook.Tab",
                       background=cls.BG_SECONDARY,
                       foreground=cls.FG_PRIMARY,
                       padding=[20, 10])
        
        style.map("TNotebook.Tab",
                 background=[('selected', cls.BG_TERTIARY)])
        
        style.configure("Horizontal.TProgressbar",
                       background=cls.ACCENT_PRIMARY,
                       troughcolor=cls.BG_TERTIARY)
        
        style.configure("TEntry",
                       fieldbackground=cls.BG_TERTIARY,
                       foreground=cls.FG_PRIMARY,
                       insertcolor=cls.FG_PRIMARY)
        
        style.configure("TCombobox",
                       fieldbackground=cls.BG_TERTIARY,
                       background=cls.BG_TERTIARY,
                       foreground=cls.FG_PRIMARY)

class PentestWorker(threading.Thread):
    """Background worker for pentesting operations"""
    
    def __init__(self, task_type: str, target: str, options: Dict[str, Any], 
                 output_queue: queue.Queue, progress_callback=None):
        super().__init__(daemon=True)
        self.task_type = task_type
        self.target = target
        self.options = options or {}
        self.output_queue = output_queue
        self.progress_callback = progress_callback
        self.is_running = True
        
    def run(self):
        """Execute the pentesting task"""
        try:
            self.output_queue.put(('info', f"üöÄ Starting {self.task_type} on {self.target}\n"))
            
            if self.progress_callback:
                self.progress_callback(10)
            
            if not FRAMEWORK_AVAILABLE:
                # Demo mode
                self.simulate_task()
            else:
                # Real execution
                self.execute_real_task()
            
            if self.progress_callback:
                self.progress_callback(100)
                
            self.output_queue.put(('success', "‚úÖ Task completed successfully!\n"))
            
        except Exception as e:
            self.output_queue.put(('error', f"‚ùå Error: {str(e)}\n"))
            if self.progress_callback:
                self.progress_callback(0)
    
    def execute_real_task(self):
        """Execute real pentesting task"""
        if self.task_type == "reconnaissance":
            self.output_queue.put(('info', "üîç Starting reconnaissance...\n"))
            recon = ReconnaissanceModule()
            result = recon.scan_target(self.target)
            self.process_results(result)
            
        elif self.task_type == "network":
            self.output_queue.put(('info', "üåê Starting network assessment...\n"))
            assessor = NetworkAssessor()
            result = assessor.scan(self.target, self.options.get('mode', 'external'))
            self.process_results(result)
            
        elif self.task_type == "web":
            self.output_queue.put(('info', "üåç Starting web application testing...\n"))
            assessor = WebAssessor()
            result = assessor.scan(self.target, tools=self.options.get('tools', ['nuclei', 'nikto']))
            self.process_results(result)
            
        elif self.task_type == "vulnerability":
            self.output_queue.put(('info', "üîç Starting vulnerability scan...\n"))
            scanner = VulnerabilityScanner()
            result = scanner.scan_target(self.target, self.options.get('scan_type', 'comprehensive'))
            self.process_results(result)
    
    def simulate_task(self):
        """Simulate task for demo mode"""
        self.output_queue.put(('info', "[DEMO MODE] Simulating scan...\n"))
        time.sleep(1)
        
        if self.progress_callback:
            self.progress_callback(30)
        
        self.output_queue.put(('success', "‚úÖ Found open ports: 22, 80, 443\n"))
        time.sleep(1)
        
        if self.progress_callback:
            self.progress_callback(60)
            
        self.output_queue.put(('warning', "‚ö†Ô∏è Potential vulnerabilities detected\n"))
        time.sleep(1)
        
        if self.progress_callback:
            self.progress_callback(90)
            
        self.output_queue.put(('info', "üìä Scan complete!\n"))
    
    def process_results(self, results):
        """Process and display results"""
        if isinstance(results, dict):
            # Process different result types
            if 'open_ports' in results:
                self.output_queue.put(('success', f"‚úÖ Found {len(results['open_ports'])} open ports\n"))
            if 'vulnerabilities' in results:
                self.output_queue.put(('warning', f"‚ö†Ô∏è Found {len(results['vulnerabilities'])} vulnerabilities\n"))
            if 'subdomains' in results:
                self.output_queue.put(('info', f"üîç Found {len(results['subdomains'])} subdomains\n"))

class PentestGUI:
    """Main GUI application using tkinter"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üõ°Ô∏è Automatic Pentesting Framework - Professional Suite")
        self.root.geometry("1400x800")
        
        # Apply dark theme
        self.root.configure(bg=ModernTheme.BG_PRIMARY)
        ModernTheme.apply_theme(self.root)
        
        # Thread management
        self.current_worker = None
        self.output_queue = queue.Queue()
        
        # Test history
        self.test_history = []
        
        # Create GUI
        self.create_widgets()
        
        # Start output processor
        self.process_output()
        
        # Configure closing
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
    def create_widgets(self):
        """Create all GUI widgets"""
        # Main container
        main_frame = ttk.Frame(self.root, style="TFrame")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Header
        self.create_header(main_frame)
        
        # Create notebook for tabs
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # Create tabs
        self.create_quick_start_tab()
        self.create_network_tab()
        self.create_web_tab()
        self.create_wireless_tab()
        self.create_mobile_tab()
        self.create_exploitation_tab()
        self.create_reports_tab()
        
    def create_header(self, parent):
        """Create application header"""
        header_frame = ttk.Frame(parent, style="Card.TFrame")
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Title
        title_frame = ttk.Frame(header_frame, style="Card.TFrame")
        title_frame.pack(side=tk.LEFT, padx=20, pady=15)
        
        title_label = ttk.Label(title_frame, 
                               text="üõ°Ô∏è AUTOMATIC PENTESTING FRAMEWORK",
                               style="Title.TLabel")
        title_label.pack(anchor=tk.W)
        
        subtitle_label = ttk.Label(title_frame,
                                  text="Professional Security Assessment Suite | 70% Real Testing Capabilities",
                                  foreground=ModernTheme.FG_SECONDARY)
        subtitle_label.pack(anchor=tk.W)
        
        # Stats frame
        stats_frame = ttk.Frame(header_frame, style="Card.TFrame")
        stats_frame.pack(side=tk.RIGHT, padx=20, pady=15)
        
        self.stats_labels = {
            'tests': self.create_stat(stats_frame, "Tests Run", "0", 0),
            'vulns': self.create_stat(stats_frame, "Vulns Found", "0", 1),
            'time': self.create_stat(stats_frame, "Time", "00:00", 2)
        }
    
    def create_stat(self, parent, label, value, column):
        """Create a statistics display"""
        frame = ttk.Frame(parent, style="Card.TFrame")
        frame.grid(row=0, column=column, padx=10)
        
        label_widget = ttk.Label(frame, text=label, 
                                foreground=ModernTheme.FG_SECONDARY,
                                font=('Segoe UI', 9))
        label_widget.pack()
        
        value_widget = ttk.Label(frame, text=value,
                               foreground=ModernTheme.ACCENT_PRIMARY,
                               font=('Segoe UI', 16, 'bold'))
        value_widget.pack()
        
        return value_widget
    
    def create_quick_start_tab(self):
        """Create quick start tab"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üéØ Quick Start")
        
        # Main container with scrollbar
        canvas = tk.Canvas(tab, bg=ModernTheme.BG_PRIMARY, highlightthickness=0)
        scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Quick scan section
        scan_frame = self.create_card(scrollable_frame, "‚ö° Quick Penetration Test")
        
        # Target input
        ttk.Label(scan_frame, text="Target:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.target_entry = ttk.Entry(scan_frame, width=50)
        self.target_entry.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W+tk.E)
        self.target_entry.insert(0, "Enter IP, domain, or URL")
        
        # Scan type
        ttk.Label(scan_frame, text="Scan Type:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.scan_type = ttk.Combobox(scan_frame, width=48, state="readonly")
        self.scan_type['values'] = [
            "üöÄ Basic Scan (Fast)",
            "üîç Comprehensive Scan",
            "üõ°Ô∏è Vulnerability Assessment",
            "üí£ Full Penetration Test"
        ]
        self.scan_type.current(0)
        self.scan_type.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W+tk.E)
        
        # Options
        options_frame = ttk.Frame(scan_frame)
        options_frame.grid(row=2, column=0, columnspan=2, pady=10)
        
        self.stealth_var = tk.BooleanVar()
        ttk.Checkbutton(options_frame, text="Stealth Mode", 
                       variable=self.stealth_var).pack(side=tk.LEFT, padx=10)
        
        self.aggressive_var = tk.BooleanVar()
        ttk.Checkbutton(options_frame, text="Aggressive Scan", 
                       variable=self.aggressive_var).pack(side=tk.LEFT, padx=10)
        
        self.report_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="Generate Report", 
                       variable=self.report_var).pack(side=tk.LEFT, padx=10)
        
        # Start button
        self.start_button = ttk.Button(scan_frame, text="üöÄ Start Penetration Test",
                                      command=self.start_quick_scan,
                                      style="TButton")
        self.start_button.grid(row=3, column=0, columnspan=2, pady=10)
        
        # Progress bar
        self.progress = ttk.Progressbar(scan_frame, mode='determinate', 
                                       style="Horizontal.TProgressbar")
        self.progress.grid(row=4, column=0, columnspan=2, sticky=tk.W+tk.E, padx=5, pady=5)
        
        # Output section
        output_frame = self.create_card(scrollable_frame, "üìä Output Console")
        
        # Terminal output
        self.output_text = scrolledtext.ScrolledText(output_frame, 
                                                     wrap=tk.WORD,
                                                     width=100, 
                                                     height=20,
                                                     bg=ModernTheme.BG_PRIMARY,
                                                     fg=ModernTheme.FG_PRIMARY,
                                                     insertbackground=ModernTheme.FG_PRIMARY,
                                                     font=('Consolas', 10))
        self.output_text.pack(padx=5, pady=5, fill=tk.BOTH, expand=True)
        
        # Configure text tags for colored output
        self.output_text.tag_config('info', foreground=ModernTheme.ACCENT_PRIMARY)
        self.output_text.tag_config('success', foreground=ModernTheme.ACCENT_SUCCESS)
        self.output_text.tag_config('warning', foreground=ModernTheme.ACCENT_WARNING)
        self.output_text.tag_config('error', foreground=ModernTheme.ACCENT_DANGER)
        
        # Clear button
        ttk.Button(output_frame, text="Clear Output",
                  command=self.clear_output).pack(pady=5)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def create_network_tab(self):
        """Create network pentesting tab"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üåê Network")
        
        # Configuration frame
        config_frame = self.create_card(tab, "üåê Network Scan Configuration")
        
        # Target
        ttk.Label(config_frame, text="Target:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.network_target = ttk.Entry(config_frame, width=40)
        self.network_target.grid(row=0, column=1, padx=5, pady=5)
        self.network_target.insert(0, "192.168.1.0/24")
        
        # Port range
        ttk.Label(config_frame, text="Port Range:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        port_frame = ttk.Frame(config_frame)
        port_frame.grid(row=1, column=1, padx=5, pady=5)
        
        self.port_start = ttk.Entry(port_frame, width=10)
        self.port_start.pack(side=tk.LEFT)
        self.port_start.insert(0, "1")
        
        ttk.Label(port_frame, text=" - ").pack(side=tk.LEFT)
        
        self.port_end = ttk.Entry(port_frame, width=10)
        self.port_end.pack(side=tk.LEFT)
        self.port_end.insert(0, "1000")
        
        # Scan type
        ttk.Label(config_frame, text="Scan Type:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        self.network_scan_type = ttk.Combobox(config_frame, width=38, state="readonly")
        self.network_scan_type['values'] = [
            "TCP SYN Scan (Stealth)",
            "TCP Connect Scan",
            "UDP Scan",
            "Comprehensive Scan"
        ]
        self.network_scan_type.current(0)
        self.network_scan_type.grid(row=2, column=1, padx=5, pady=5)
        
        # Buttons
        button_frame = ttk.Frame(config_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=10)
        
        ttk.Button(button_frame, text="üîç Start Network Scan",
                  command=lambda: self.start_scan('network')).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, text="üí• Auto-Exploit",
                  command=lambda: self.start_scan('exploit'),
                  style="Danger.TButton").pack(side=tk.LEFT, padx=5)
    
    def create_web_tab(self):
        """Create web application testing tab"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üåç Web Apps")
        
        # Configuration frame
        config_frame = self.create_card(tab, "üåç Web Application Testing")
        
        # Target URL
        ttk.Label(config_frame, text="Target URL:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.web_target = ttk.Entry(config_frame, width=50)
        self.web_target.grid(row=0, column=1, padx=5, pady=5)
        self.web_target.insert(0, "https://example.com")
        
        # Scan modules
        ttk.Label(config_frame, text="Scan Modules:").grid(row=1, column=0, sticky=tk.W+tk.N, padx=5, pady=5)
        modules_frame = ttk.Frame(config_frame)
        modules_frame.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)
        
        self.web_modules = {}
        modules = [
            ("nuclei", "Nuclei (CVE & Known Vulnerabilities)"),
            ("nikto", "Nikto (Web Server Scanner)"),
            ("sqlmap", "SQLMap (SQL Injection)"),
            ("xss", "XSS Detection"),
            ("waf", "WAF Detection (WAFW00F)")
        ]
        
        for i, (key, label) in enumerate(modules):
            var = tk.BooleanVar(value=True)
            self.web_modules[key] = var
            ttk.Checkbutton(modules_frame, text=label, 
                          variable=var).grid(row=i, column=0, sticky=tk.W)
        
        # Start button
        ttk.Button(config_frame, text="üîç Start Web Scan",
                  command=lambda: self.start_scan('web')).grid(row=2, column=0, columnspan=2, pady=10)
    
    def create_wireless_tab(self):
        """Create wireless testing tab"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üì° Wireless")
        
        # Configuration frame
        config_frame = self.create_card(tab, "üì° Wireless Network Testing")
        
        # Interface
        ttk.Label(config_frame, text="Interface:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.wireless_interface = ttk.Combobox(config_frame, width=30, state="readonly")
        self.wireless_interface['values'] = ["wlan0", "wlan1", "wlan0mon"]
        self.wireless_interface.current(0)
        self.wireless_interface.grid(row=0, column=1, padx=5, pady=5)
        
        # Attack type
        ttk.Label(config_frame, text="Attack Type:").grid(row=1, column=0, sticky=tk.W+tk.N, padx=5, pady=5)
        attack_frame = ttk.Frame(config_frame)
        attack_frame.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)
        
        self.wireless_attack = tk.StringVar(value="scan")
        attacks = [
            ("scan", "Network Discovery"),
            ("handshake", "WPA/WPA2 Handshake Capture"),
            ("deauth", "Deauthentication Attack"),
            ("crack", "Password Cracking")
        ]
        
        for value, text in attacks:
            ttk.Radiobutton(attack_frame, text=text, 
                          variable=self.wireless_attack,
                          value=value).pack(anchor=tk.W)
        
        # Start button
        ttk.Button(config_frame, text="üì° Start Wireless Attack",
                  command=lambda: self.start_scan('wireless'),
                  style="TButton").grid(row=2, column=0, columnspan=2, pady=10)
    
    def create_mobile_tab(self):
        """Create mobile testing tab"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üì± Mobile")
        
        # Configuration frame
        config_frame = self.create_card(tab, "üì± Mobile Application Testing")
        
        # APK file
        ttk.Label(config_frame, text="APK File:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        
        file_frame = ttk.Frame(config_frame)
        file_frame.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W+tk.E)
        
        self.mobile_file = ttk.Entry(file_frame, width=40)
        self.mobile_file.pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(file_frame, text="Browse",
                  command=self.browse_apk).pack(side=tk.LEFT)
        
        # Analysis options
        ttk.Label(config_frame, text="Analysis:").grid(row=1, column=0, sticky=tk.W+tk.N, padx=5, pady=5)
        options_frame = ttk.Frame(config_frame)
        options_frame.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)
        
        self.mobile_options = {}
        options = [
            ("static", "Static Analysis (MobSF)"),
            ("decompile", "Decompile with Apktool"),
            ("frida", "Dynamic Analysis with Frida"),
            ("drozer", "Drozer Security Assessment")
        ]
        
        for key, label in options:
            var = tk.BooleanVar(value=True)
            self.mobile_options[key] = var
            ttk.Checkbutton(options_frame, text=label,
                          variable=var).pack(anchor=tk.W)
        
        # Start button
        ttk.Button(config_frame, text="üîç Analyze Mobile App",
                  command=lambda: self.start_scan('mobile')).grid(row=2, column=0, columnspan=2, pady=10)
    
    def create_exploitation_tab(self):
        """Create exploitation tab"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üí• Exploitation")
        
        # Configuration frame
        config_frame = self.create_card(tab, "üí• Exploitation Framework")
        
        # Target
        ttk.Label(config_frame, text="Target:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.exploit_target = ttk.Entry(config_frame, width=40)
        self.exploit_target.grid(row=0, column=1, padx=5, pady=5)
        
        # Service/Port
        ttk.Label(config_frame, text="Service:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.exploit_service = ttk.Combobox(config_frame, width=38, state="readonly")
        self.exploit_service['values'] = [
            "SSH (22)", "FTP (21)", "HTTP (80)", 
            "HTTPS (443)", "SMB (445)", "Custom"
        ]
        self.exploit_service.current(0)
        self.exploit_service.grid(row=1, column=1, padx=5, pady=5)
        
        # Exploit type
        ttk.Label(config_frame, text="Type:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        self.exploit_type = ttk.Combobox(config_frame, width=38, state="readonly")
        self.exploit_type['values'] = [
            "Auto-Exploit (Smart)",
            "Brute Force",
            "Known Vulnerabilities",
            "SQL Injection",
            "Command Injection"
        ]
        self.exploit_type.current(0)
        self.exploit_type.grid(row=2, column=1, padx=5, pady=5)
        
        # Launch button
        ttk.Button(config_frame, text="üí£ Launch Exploitation",
                  command=lambda: self.start_scan('exploit'),
                  style="Danger.TButton").grid(row=3, column=0, columnspan=2, pady=10)
    
    def create_reports_tab(self):
        """Create reports tab"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üìä Reports")
        
        # Report generation frame
        gen_frame = self.create_card(tab, "üìä Report Generation")
        
        # Report type
        ttk.Label(gen_frame, text="Report Type:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.report_type = ttk.Combobox(gen_frame, width=30, state="readonly")
        self.report_type['values'] = [
            "Executive Summary",
            "Technical Report",
            "Full Report",
            "Vulnerability Report"
        ]
        self.report_type.current(0)
        self.report_type.grid(row=0, column=1, padx=5, pady=5)
        
        # Format
        ttk.Label(gen_frame, text="Format:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.report_format = ttk.Combobox(gen_frame, width=30, state="readonly")
        self.report_format['values'] = ["HTML", "PDF", "Markdown", "JSON"]
        self.report_format.current(0)
        self.report_format.grid(row=1, column=1, padx=5, pady=5)
        
        # Generate button
        ttk.Button(gen_frame, text="üìÑ Generate Report",
                  command=self.generate_report).grid(row=2, column=0, columnspan=2, pady=10)
    
    def create_card(self, parent, title):
        """Create a card-style frame with title"""
        frame = ttk.Frame(parent, style="Card.TFrame")
        frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Title
        title_label = ttk.Label(frame, text=title,
                               font=('Segoe UI', 11, 'bold'),
                               foreground=ModernTheme.ACCENT_PRIMARY)
        title_label.pack(anchor=tk.W, padx=10, pady=(10, 5))
        
        # Content frame
        content_frame = ttk.Frame(frame, style="Card.TFrame")
        content_frame.pack(fill=tk.BOTH, padx=10, pady=(0, 10))
        
        return content_frame
    
    def start_quick_scan(self):
        """Start quick penetration test"""
        target = self.target_entry.get().strip()
        if not target or target == "Enter IP, domain, or URL":
            messagebox.showwarning("Warning", "Please enter a valid target")
            return
        
        # Clear output
        self.clear_output()
        
        # Update UI
        self.start_button.config(state='disabled')
        self.progress['value'] = 0
        
        # Determine task type
        scan_type = self.scan_type.get()
        task_type = "reconnaissance"
        if "Vulnerability" in scan_type:
            task_type = "vulnerability"
        elif "Penetration" in scan_type:
            task_type = "exploit"
        
        # Start worker thread
        options = {
            'stealth': self.stealth_var.get(),
            'aggressive': self.aggressive_var.get()
        }
        
        self.current_worker = PentestWorker(
            task_type, target, options,
            self.output_queue,
            self.update_progress
        )
        self.current_worker.start()
        
        # Update stats
        current_tests = int(self.stats_labels['tests']['text'])
        self.stats_labels['tests']['text'] = str(current_tests + 1)
    
    def start_scan(self, scan_type):
        """Start specific type of scan"""
        target = ""
        options = {}
        
        if scan_type == 'network':
            target = self.network_target.get().strip()
            if not target:
                messagebox.showwarning("Warning", "Please enter a network target")
                return
            options = {
                'port_start': self.port_start.get(),
                'port_end': self.port_end.get(),
                'scan_type': self.network_scan_type.get()
            }
            
        elif scan_type == 'web':
            target = self.web_target.get().strip()
            if not target:
                messagebox.showwarning("Warning", "Please enter a web target")
                return
            tools = [k for k, v in self.web_modules.items() if v.get()]
            options = {'tools': tools}
            
        elif scan_type == 'wireless':
            target = self.wireless_interface.get()
            options = {
                'interface': target,
                'attack': self.wireless_attack.get()
            }
            
        elif scan_type == 'mobile':
            target = self.mobile_file.get().strip()
            if not target:
                messagebox.showwarning("Warning", "Please select an APK file")
                return
            options = {k: v.get() for k, v in self.mobile_options.items()}
            
        elif scan_type == 'exploit':
            target = self.exploit_target.get().strip() if hasattr(self, 'exploit_target') else ""
            if not target:
                messagebox.showwarning("Warning", "Please enter an exploitation target")
                return
            if hasattr(self, 'exploit_service'):
                options = {
                    'service': self.exploit_service.get(),
                    'type': self.exploit_type.get()
                }
        
        # Clear output and start scan
        self.clear_output()
        self.append_output('info', f"Starting {scan_type} scan on {target}\n")
        
        # Start worker
        self.current_worker = PentestWorker(
            scan_type, target, options,
            self.output_queue,
            self.update_progress
        )
        self.current_worker.start()
    
    def browse_apk(self):
        """Browse for APK file"""
        filename = filedialog.askopenfilename(
            title="Select APK file",
            filetypes=[("APK files", "*.apk"), ("All files", "*.*")]
        )
        if filename:
            self.mobile_file.delete(0, tk.END)
            self.mobile_file.insert(0, filename)
    
    def generate_report(self):
        """Generate penetration testing report"""
        if not self.test_history:
            messagebox.showinfo("Info", "No test results to report")
            return
        
        report_type = self.report_type.get()
        report_format = self.report_format.get()
        
        # Create report content
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"pentest_report_{timestamp}.{report_format.lower()}"
        report_path = Path("reports") / report_file
        report_path.parent.mkdir(exist_ok=True)
        
        # Simple report generation
        report_content = f"# Penetration Testing Report\n\n"
        report_content += f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        report_content += f"Report Type: {report_type}\n\n"
        report_content += f"Total Tests: {len(self.test_history)}\n\n"
        
        with open(report_path, "w") as f:
            f.write(report_content)
        
        self.append_output('success', f"‚úÖ Report saved to: {report_path}\n")
        messagebox.showinfo("Success", f"Report generated: {report_path}")
    
    def clear_output(self):
        """Clear output text"""
        self.output_text.delete(1.0, tk.END)
    
    def append_output(self, tag, text):
        """Append text to output with color tag"""
        self.output_text.insert(tk.END, text, tag)
        self.output_text.see(tk.END)
    
    def update_progress(self, value):
        """Update progress bar"""
        self.progress['value'] = value
        if value >= 100:
            self.start_button.config(state='normal')
    
    def process_output(self):
        """Process output from worker threads"""
        try:
            while True:
                tag, text = self.output_queue.get_nowait()
                self.append_output(tag, text)
        except queue.Empty:
            pass
        finally:
            self.root.after(100, self.process_output)
    
    def on_closing(self):
        """Handle window closing"""
        if messagebox.askokcancel("Quit", "Do you want to quit?"):
            self.root.destroy()
    
    def run(self):
        """Start the GUI"""
        # Initial message
        self.append_output('success', 
            "üõ°Ô∏è Automatic Pentesting Framework initialized\n"
            "‚úÖ 70% Real Testing Capabilities Active\n"
            "‚ö†Ô∏è Use only on authorized targets!\n\n"
            "Select a target and testing type to begin...\n")
        
        self.root.mainloop()

def main():
    """Main entry point"""
    print("üöÄ Launching Automatic Pentesting Framework GUI...")
    print("=" * 50)
    print("‚úÖ REAL CAPABILITIES:")
    print("  ‚Ä¢ Network Penetration Testing")
    print("  ‚Ä¢ Web Application Testing")
    print("  ‚Ä¢ Mobile App Analysis")
    print("  ‚Ä¢ Wireless Testing")
    print("  ‚Ä¢ Exploitation Framework")
    print("=" * 50)
    print("‚ö†Ô∏è  Use only on authorized targets!")
    print()
    
    # Create output directory
    Config.create_output_dirs()
    
    # Start GUI
    app = PentestGUI()
    app.run()

if __name__ == "__main__":
    main()
