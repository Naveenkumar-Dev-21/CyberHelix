#!/usr/bin/env python3
"""
Matrix Pentesting System - Main Application
A cyberpunk-themed automated pentesting framework
"""

import sys
import os
import time
import asyncio
from typing import Optional
from pathlib import Path

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from ui.matrix_ui import MatrixUI
from core.command_interpreter import CommandInterpreter
from core.pentest_engine import PentestEngine
from utils.logger import setup_logger
from utils.config import Config

class MatrixPentestSystem:
    """Main application class for Matrix Pentesting System"""
    
    def __init__(self):
        self.config = Config()
        self.logger = setup_logger("MatrixPentest")
        self.ui = MatrixUI()
        self.interpreter = CommandInterpreter()
        self.engine = PentestEngine()
        self.running = False
        
    async def initialize(self):
        """Initialize the system"""
        self.logger.info("Initializing Matrix Pentesting System...")
        
        # Show boot sequence
        await self.ui.show_boot_sequence()
        
        # Initialize modules
        self.interpreter.initialize(self.engine)
        self.engine.initialize(self.config)
        
        self.logger.info("System initialized successfully")
        
    async def run(self):
        """Main application loop"""
        self.running = True
        
        try:
            await self.initialize()
            
            # Show main interface
            self.ui.clear_screen()
            self.ui.show_header()
            self.ui.show_welcome_message()
            
            while self.running:
                try:
                    # Get user input
                    command = await self.ui.get_command()
                    
                    if command.lower() in ['exit', 'quit', 'logout']:
                        await self.shutdown()
                        break
                    
                    if command.lower() == 'help':
                        self.ui.show_help()
                        continue
                    
                    if command.lower() == 'clear':
                        self.ui.clear_screen()
                        self.ui.show_header()
                        continue
                    
                    # Process command
                    await self.process_command(command)
                    
                except KeyboardInterrupt:
                    await self.shutdown()
                    break
                except Exception as e:
                    self.logger.error(f"Error processing command: {e}")
                    self.ui.show_error(str(e))
                    
        except Exception as e:
            self.logger.critical(f"Critical error: {e}")
            self.ui.show_critical_error(str(e))
            
    async def process_command(self, command: str):
        """Process user command"""
        self.ui.show_processing()
        
        # Parse command
        parsed = self.interpreter.parse(command)
        
        if not parsed:
            self.ui.show_error("Invalid command syntax")
            return
        
        # Execute command
        result = await self.engine.execute(parsed)
        
        # Display result
        self.ui.show_result(result)
        
    async def shutdown(self):
        """Shutdown the system"""
        self.logger.info("Shutting down Matrix Pentesting System...")
        await self.ui.show_shutdown_sequence()
        self.running = False
        
def main():
    """Main entry point"""
    app = MatrixPentestSystem()
    
    try:
        asyncio.run(app.run())
    except KeyboardInterrupt:
        print("\n[!] System terminated by user")
    except Exception as e:
        print(f"[!] Fatal error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
