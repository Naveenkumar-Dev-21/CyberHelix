#!/usr/bin/env python3
"""
PentestGPT AI Enhanced - Integration module for enhanced AI accuracy
"""

import sys
import os

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.ai_trainer import EnhancedAITrainer
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AIEnhancedProcessor:
    """Process pentest commands with near 100% accuracy using pattern matching + ML"""
    
    def __init__(self):
        self.trainer = EnhancedAITrainer()
        self.initialize_model()
        
    def initialize_model(self):
        """Initialize and train the AI model"""
        # Try to load existing model
        if not self.trainer.load_model():
            logger.info("Training new AI model...")
            accuracy = self.trainer.train_ensemble_model()
            self.trainer.save_model()
            logger.info(f"Model trained with {accuracy:.1%} accuracy")
        else:
            accuracy = self.trainer.accuracy_scores.get('ensemble', 0)
            logger.info(f"Model loaded with {accuracy:.1%} accuracy")
            
    def process_command(self, text, target=None):
        """Process user command and return intent with high accuracy"""
        
        # Use pattern-based prediction for maximum accuracy
        result = self.trainer.predict_intent_with_patterns(text)
        
        intent = result['intent']
        confidence = result['confidence']
        method = result.get('method', 'unknown')
        
        # Generate appropriate command based on intent
        command = self.generate_command(intent, target)
        
        return {
            'intent': intent,
            'confidence': confidence,
            'method': method,
            'command': command,
            'explanation': self.get_explanation(intent)
        }
        
    def generate_command(self, intent, target=None):
        """Generate appropriate command for the intent"""
        
        if not target:
            target = "TARGET_IP"
            
        commands = {
            'network_scan': f"nmap -sV -sC -O {target}",
            'web_test': f"nikto -h {target}",
            'exploit': "msfconsole -q -x 'search exploit'",
            'password_attack': f"hydra -L users.txt -P passwords.txt {target} ssh",
            'enumeration': f"enum4linux -a {target}",
            'vuln_scan': f"nmap --script vuln {target}",
            'info_gathering': f"whois {target} && nslookup {target}",
            'wireless': "airmon-ng start wlan0",
            'cloud': "aws s3 ls --no-sign-request",
            'mobile': "adb devices && frida-ps -U"
        }
        
        return commands.get(intent, f"echo 'No specific command for {intent}'")
        
    def get_explanation(self, intent):
        """Get explanation for the intent"""
        
        explanations = {
            'network_scan': "Performing network reconnaissance to identify open ports and services",
            'web_test': "Testing web application for common vulnerabilities",
            'exploit': "Generating or deploying exploitation payloads",
            'password_attack': "Attempting to crack passwords or perform brute-force attacks",
            'enumeration': "Enumerating services, users, and shares on the target",
            'vuln_scan': "Scanning for known vulnerabilities and CVEs",
            'info_gathering': "Collecting public information about the target",
            'wireless': "Testing wireless network security",
            'cloud': "Assessing cloud infrastructure security",
            'mobile': "Analyzing mobile application security"
        }
        
        return explanations.get(intent, "Processing your request")
        
    def improve_model(self, user_input, correct_intent):
        """Add new training data to improve model"""
        
        # Add to training data
        self.trainer.training_data.append((user_input, correct_intent))
        
        # Retrain periodically
        if len(self.trainer.training_data) % 100 == 0:
            logger.info("Retraining model with new data...")
            accuracy = self.trainer.train_ensemble_model()
            self.trainer.save_model()
            logger.info(f"Model improved to {accuracy:.1%} accuracy")
            
def test_ai_enhanced():
    """Test the enhanced AI processor"""
    
    processor = AIEnhancedProcessor()
    
    # Test queries
    test_queries = [
        "scan the network for open ports",
        "I want to test this website for SQL injection",
        "generate a reverse shell payload",
        "crack this password hash",
        "enumerate SMB shares",
        "find vulnerabilities in the target",
        "perform OSINT on the domain",
        "crack wifi password",
        "test AWS S3 buckets",
        "analyze this Android APK"
    ]
    
    print("\n" + "="*80)
    print("Testing Enhanced AI Processor with Pattern Matching")
    print("="*80)
    
    for query in test_queries:
        result = processor.process_command(query, "192.168.1.1")
        
        print(f"\nQuery: {query}")
        print(f"Intent: {result['intent']}")
        print(f"Confidence: {result['confidence']:.1%}")
        print(f"Method: {result['method']}")
        print(f"Command: {result['command']}")
        print(f"Explanation: {result['explanation']}")
        print("-" * 40)
        
    # Test accuracy
    correct = 0
    total = len(test_queries)
    
    expected_intents = [
        'network_scan', 'web_test', 'exploit', 'password_attack',
        'enumeration', 'vuln_scan', 'info_gathering', 'wireless',
        'cloud', 'mobile'
    ]
    
    for query, expected in zip(test_queries, expected_intents):
        result = processor.process_command(query)
        if result['intent'] == expected:
            correct += 1
        else:
            print(f"\n⚠️ Mismatch: Expected '{expected}' but got '{result['intent']}' for: {query}")
            
    accuracy = (correct / total) * 100
    print(f"\n{'='*80}")
    print(f"Overall Accuracy: {accuracy:.1%} ({correct}/{total} correct)")
    print(f"{'='*80}")
    
    if accuracy >= 90:
        print("✅ Excellent accuracy achieved!")
    elif accuracy >= 80:
        print("⚠️ Good accuracy, but can be improved")
    else:
        print("❌ Accuracy needs improvement")
        
if __name__ == "__main__":
    test_ai_enhanced()
