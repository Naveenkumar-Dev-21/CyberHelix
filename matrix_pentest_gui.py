#!/usr/bin/env python3
"""
Matrix Pentesting Framework - Main GUI Application
Advanced cybersecurity toolkit with Matrix-themed interface
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import customtkinter as ctk
import threading
import queue
import subprocess
import json
import sys
import os
import time
import random
from datetime import datetime
from pathlib import Path

# Set the appearance mode and color theme
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")

# Import custom modules (to be created)
from modules.matrix_rain import MatrixRain
from modules.neural_command import NeuralCommandCenter
from modules.quick_scan import QuickScanModule
from modules.advanced_ops import AdvancedOperations
from modules.mobile_fortress import MobileFortress
from modules.wireless_infiltration import WirelessInfiltration
from modules.payload_matrix import PayloadMatrix
from modules.ai_neural_link import AINeuralLink
from modules.system_monitor import SystemMonitor
from modules.intelligence_reports import IntelligenceReports
from modules.utils import ToolIntegration, ThreadManager

class MatrixPentestGUI(ctk.CTk):
    """Main application class for Matrix Pentesting Framework"""
    
    def __init__(self):
        super().__init__()
        
        # Configure main window
        self.title("Matrix Pentesting Framework v3.0 - Enter the Matrix")
        self.geometry("1600x900")
        
        # Set Matrix theme colors
        self.configure(fg_color="#0a0e1b")
        
        # Initialize variables
        self.current_scan = None
        self.scan_results = {}
        self.active_threads = []
        self.command_queue = queue.Queue()
        self.result_queue = queue.Queue()
        
        # Initialize tool integration
        self.tools = ToolIntegration()
        self.thread_manager = ThreadManager()
        
        # Setup UI
        self.setup_styles()
        self.create_widgets()
        self.setup_matrix_effect()
        
        # Start background processes
        self.start_background_tasks()
        
        # Bind closing event
        self.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def setup_styles(self):
        """Configure Matrix theme styles"""
        self.matrix_colors = {
            'bg_primary': '#0a0e1b',
            'bg_secondary': '#0d1117',
            'bg_tertiary': '#161b22',
            'text_primary': '#00ff41',
            'text_secondary': '#39ff14',
            'text_dim': '#008f11',
            'accent': '#00ff41',
            'warning': '#ff6b00',
            'danger': '#ff0033',
            'border': '#00ff41',
            'button_hover': '#00cc33'
        }
        
        # Configure custom font
        self.matrix_font = ("Consolas", 11)
        self.title_font = ("Consolas", 14, "bold")
        self.code_font = ("Courier New", 10)
    
    def create_widgets(self):
        """Create main UI components"""
        # Create main container
        self.main_container = ctk.CTkFrame(self, fg_color=self.matrix_colors['bg_primary'])
        self.main_container.pack(fill="both", expand=True, padx=5, pady=5)
        
        # Create header
        self.create_header()
        
        # Create tab view
        self.create_tabs()
        
        # Create status bar
        self.create_status_bar()
    
    def create_header(self):
        """Create application header with Matrix styling"""
        header_frame = ctk.CTkFrame(
            self.main_container,
            height=80,
            fg_color=self.matrix_colors['bg_secondary'],
            corner_radius=10
        )
        header_frame.pack(fill="x", padx=5, pady=(5, 10))
        header_frame.pack_propagate(False)
        
        # Matrix rain canvas for header
        self.header_canvas = tk.Canvas(
            header_frame,
            height=70,
            bg=self.matrix_colors['bg_secondary'],
            highlightthickness=0
        )
        self.header_canvas.pack(fill="both", expand=True, padx=5, pady=5)
        
        # Title overlay
        title_label = ctk.CTkLabel(
            header_frame,
            text="[ MATRIX PENTESTING FRAMEWORK ]",
            font=("Consolas", 24, "bold"),
            text_color=self.matrix_colors['text_primary']
        )
        title_label.place(relx=0.5, rely=0.5, anchor="center")
        
        # Subtitle
        subtitle_label = ctk.CTkLabel(
            header_frame,
            text="Wake up, Neo... The Matrix has you...",
            font=("Consolas", 11),
            text_color=self.matrix_colors['text_dim']
        )
        subtitle_label.place(relx=0.5, rely=0.75, anchor="center")
        
        # System status indicators
        self.create_status_indicators(header_frame)
    
    def create_status_indicators(self, parent):
        """Create real-time status indicators"""
        indicator_frame = ctk.CTkFrame(
            parent,
            fg_color="transparent"
        )
        indicator_frame.place(relx=0.95, rely=0.5, anchor="e")
        
        # Connection status
        self.connection_indicator = ctk.CTkLabel(
            indicator_frame,
            text="● CONNECTED",
            font=("Consolas", 9),
            text_color=self.matrix_colors['text_primary']
        )
        self.connection_indicator.pack(pady=2)
        
        # System status
        self.system_indicator = ctk.CTkLabel(
            indicator_frame,
            text="● SYSTEM READY",
            font=("Consolas", 9),
            text_color=self.matrix_colors['text_primary']
        )
        self.system_indicator.pack(pady=2)
    
    def create_tabs(self):
        """Create main tab interface"""
        # Tab container
        tab_container = ctk.CTkFrame(
            self.main_container,
            fg_color=self.matrix_colors['bg_secondary'],
            corner_radius=10
        )
        tab_container.pack(fill="both", expand=True, padx=5, pady=5)
        
        # Create tabview
        self.tabview = ctk.CTkTabview(
            tab_container,
            fg_color=self.matrix_colors['bg_secondary'],
            segmented_button_fg_color=self.matrix_colors['bg_tertiary'],
            segmented_button_selected_color=self.matrix_colors['accent'],
            segmented_button_selected_hover_color=self.matrix_colors['button_hover'],
            text_color=self.matrix_colors['text_primary'],
            corner_radius=10
        )
        self.tabview.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Add tabs
        self.tabs = {}
        tab_names = [
            "Neural Command",
            "Quick Scan",
            "Advanced Ops",
            "Mobile Fortress",
            "Wireless",
            "Payload Matrix",
            "AI Neural Link",
            "System Monitor",
            "Intel Reports"
        ]
        
        for tab_name in tab_names:
            self.tabs[tab_name] = self.tabview.add(tab_name)
            self.setup_tab_content(tab_name)
    
    def setup_tab_content(self, tab_name):
        """Setup content for each tab"""
        tab = self.tabs[tab_name]
        
        # Create frame for tab content
        content_frame = ctk.CTkFrame(
            tab,
            fg_color=self.matrix_colors['bg_tertiary'],
            corner_radius=10
        )
        content_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        if tab_name == "Neural Command":
            self.neural_command = NeuralCommandCenter(
                content_frame,
                self.matrix_colors,
                self.command_queue,
                self.result_queue
            )
            self.neural_command.create_interface()
            
        elif tab_name == "Quick Scan":
            self.quick_scan = QuickScanModule(
                content_frame,
                self.matrix_colors,
                self.tools
            )
            self.quick_scan.create_interface()
            
        elif tab_name == "Advanced Ops":
            self.advanced_ops = AdvancedOperations(
                content_frame,
                self.matrix_colors,
                self.tools
            )
            self.advanced_ops.create_interface()
            
        elif tab_name == "Mobile Fortress":
            self.mobile_fortress = MobileFortress(
                content_frame,
                self.matrix_colors,
                self.tools
            )
            self.mobile_fortress.create_interface()
            
        elif tab_name == "Wireless":
            self.wireless = WirelessInfiltration(
                content_frame,
                self.matrix_colors,
                self.tools
            )
            self.wireless.create_interface()
            
        elif tab_name == "Payload Matrix":
            self.payload_matrix = PayloadMatrix(
                content_frame,
                self.matrix_colors,
                self.tools
            )
            self.payload_matrix.create_interface()
            
        elif tab_name == "AI Neural Link":
            self.ai_neural = AINeuralLink(
                content_frame,
                self.matrix_colors
            )
            self.ai_neural.create_interface()
            
        elif tab_name == "System Monitor":
            self.system_monitor = SystemMonitor(
                content_frame,
                self.matrix_colors
            )
            self.system_monitor.create_interface()
            
        elif tab_name == "Intel Reports":
            self.intel_reports = IntelligenceReports(
                content_frame,
                self.matrix_colors,
                self.scan_results
            )
            self.intel_reports.create_interface()
    
    def create_status_bar(self):
        """Create status bar at bottom"""
        status_frame = ctk.CTkFrame(
            self.main_container,
            height=30,
            fg_color=self.matrix_colors['bg_secondary'],
            corner_radius=10
        )
        status_frame.pack(fill="x", padx=5, pady=(5, 5))
        status_frame.pack_propagate(False)
        
        # Status text
        self.status_label = ctk.CTkLabel(
            status_frame,
            text="[READY] Awaiting commands...",
            font=("Consolas", 10),
            text_color=self.matrix_colors['text_dim']
        )
        self.status_label.pack(side="left", padx=10)
        
        # Progress bar
        self.progress_bar = ctk.CTkProgressBar(
            status_frame,
            width=200,
            height=10,
            progress_color=self.matrix_colors['accent'],
            fg_color=self.matrix_colors['bg_tertiary']
        )
        self.progress_bar.pack(side="right", padx=10)
        self.progress_bar.set(0)
        
        # Activity indicator
        self.activity_label = ctk.CTkLabel(
            status_frame,
            text="",
            font=("Consolas", 10),
            text_color=self.matrix_colors['text_primary']
        )
        self.activity_label.pack(side="right", padx=10)
    
    def setup_matrix_effect(self):
        """Initialize Matrix rain effect"""
        # This will be handled by the matrix_rain module
        self.matrix_rain = MatrixRain(self.header_canvas, self.matrix_colors)
        self.matrix_rain.start()
    
    def start_background_tasks(self):
        """Start background monitoring and processing"""
        # Queue processor
        self.process_queue_thread = threading.Thread(
            target=self.process_queues,
            daemon=True
        )
        self.process_queue_thread.start()
        
        # System monitor updater
        self.monitor_thread = threading.Thread(
            target=self.update_system_monitor,
            daemon=True
        )
        self.monitor_thread.start()
        
        # Status updater
        self.after(1000, self.update_status)
    
    def process_queues(self):
        """Process command and result queues"""
        while True:
            try:
                # Process commands
                if not self.command_queue.empty():
                    command = self.command_queue.get()
                    self.execute_command(command)
                
                # Process results
                if not self.result_queue.empty():
                    result = self.result_queue.get()
                    self.handle_result(result)
                
                time.sleep(0.1)
            except Exception as e:
                print(f"Queue processing error: {e}")
    
    def execute_command(self, command):
        """Execute a command from the queue"""
        try:
            # Update status
            self.update_status_text(f"Executing: {command['type']}")
            
            # Execute based on command type
            if command['type'] == 'scan':
                self.tools.execute_scan(command, self.result_queue)
            elif command['type'] == 'exploit':
                self.tools.execute_exploit(command, self.result_queue)
            elif command['type'] == 'report':
                self.tools.generate_report(command, self.result_queue)
            
        except Exception as e:
            self.result_queue.put({
                'type': 'error',
                'message': str(e)
            })
    
    def handle_result(self, result):
        """Handle results from executed commands"""
        try:
            if result['type'] == 'scan_result':
                self.scan_results[result['scan_id']] = result['data']
                self.update_status_text(f"Scan completed: {result['scan_id']}")
                
            elif result['type'] == 'error':
                self.show_error(result['message'])
                
            elif result['type'] == 'info':
                self.update_status_text(result['message'])
                
        except Exception as e:
            print(f"Result handling error: {e}")
    
    def update_system_monitor(self):
        """Update system monitoring data"""
        while True:
            try:
                if hasattr(self, 'system_monitor'):
                    self.system_monitor.update_metrics()
                time.sleep(2)
            except Exception as e:
                print(f"Monitor update error: {e}")
    
    def update_status(self):
        """Update status indicators"""
        # Update activity indicator with animated effect
        symbols = ['◐', '◓', '◑', '◒']
        current_symbol = random.choice(symbols)
        self.activity_label.configure(text=current_symbol)
        
        # Schedule next update
        self.after(500, self.update_status)
    
    def update_status_text(self, text):
        """Update status bar text"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.status_label.configure(text=f"[{timestamp}] {text}")
    
    def show_error(self, message):
        """Display error message"""
        messagebox.showerror("Matrix Error", message)
        self.update_status_text(f"ERROR: {message}")
    
    def on_closing(self):
        """Handle application closing"""
        if messagebox.askokcancel("Exit Matrix", "Disconnect from the Matrix?"):
            # Clean up threads
            for thread in self.active_threads:
                if thread.is_alive():
                    thread.join(timeout=1)
            
            # Stop Matrix rain
            if hasattr(self, 'matrix_rain'):
                self.matrix_rain.stop()
            
            self.destroy()
            sys.exit(0)

def main():
    """Main entry point"""
    # Check for root privileges if needed (Unix/Linux only)
    try:
        if hasattr(os, 'geteuid') and os.geteuid() != 0:
            print("[WARNING] Some features may require root privileges")
    except:
        pass  # Windows or other OS
    
    # Create and run application
    app = MatrixPentestGUI()
    app.mainloop()

if __name__ == "__main__":
    main()
