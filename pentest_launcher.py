#!/usr/bin/env python3
"""
Automatic Pentesting Master Launcher
Choose the best interface for your pentesting needs
"""

import os
import sys
import subprocess
from pathlib import Path

class PentestLauncher:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        
    def display_menu(self):
        """Display the main menu"""
        print("\n" + "="*70)
        print(" üîí AUTOMATIC PENTESTING SUITE - MASTER LAUNCHER üîí ")
        print("="*70)
        print("\nSelect your preferred interface:\n")
        
        print("üìü COMMAND LINE INTERFACES:")
        print("  [1] Main CLI (Full Feature Set) - Recommended for automation")
        print("      ‚Ä¢ All tools: Nmap, Nuclei, SQLMap, Nikto, etc.")
        print("      ‚Ä¢ Autonomous mode, AI-powered, learning system")
        print("      ‚Ä¢ Commands: scan, recon, vuln, exploit, report")
        
        print("\nüñ•Ô∏è  GRAPHICAL INTERFACES (GUI):")
        print("  [2] PentestGPT Enhanced (NEW) - Best for comprehensive testing")
        print("      ‚Ä¢ Full detail display with tabs")
        print("      ‚Ä¢ Autonomous scanning")
        print("      ‚Ä¢ Real-time results")
        print("      ‚Ä¢ Comprehensive reporting")
        
        print("\n  [3] PentestGPT Ultimate - ChatGPT-style interface")
        print("      ‚Ä¢ Natural language interaction")
        print("      ‚Ä¢ File upload support")
        print("      ‚Ä¢ Terminal integration")
        
        print("\n  [4] AI Pentest GUI - AI-focused interface")
        print("      ‚Ä¢ Machine learning integration")
        print("      ‚Ä¢ Smart vulnerability prioritization")
        
        print("\n  [5] Chat GUI - Interactive chat interface")
        print("      ‚Ä¢ Conversational pentesting")
        print("      ‚Ä¢ Step-by-step guidance")
        
        print("\nü§ñ SPECIAL MODES:")
        print("  [6] Autonomous Mode - Fully automated pentesting")
        print("  [7] Copilot Mode - AI assistant for pentesting")
        print("  [8] Red Team Mode - Comprehensive engagement simulation")
        
        print("\nüìö UTILITIES:")
        print("  [9] Check System Configuration")
        print("  [10] View Documentation")
        print("  [0] Exit")
        
        print("\n" + "-"*70)
        
    def run_cli(self):
        """Run the main CLI"""
        print("\nüöÄ Launching Main CLI Interface...")
        print("\nAvailable commands:")
        print("  ‚Ä¢ python3 -m src.main scan <target>")
        print("  ‚Ä¢ python3 -m src.main recon <target>")
        print("  ‚Ä¢ python3 -m src.main vuln <target>")
        print("  ‚Ä¢ python3 -m src.main autonomous <target>")
        print("\nExample: python3 -m src.main scan testphp.vulnweb.com")
        
        cmd = input("\nEnter command (or 'help' for more): ").strip()
        if cmd == 'help':
            subprocess.run([sys.executable, "-m", "src.main", "--help"])
        elif cmd:
            subprocess.run(cmd, shell=True)
            
    def run_enhanced_gui(self):
        """Run the enhanced GUI"""
        print("\nüöÄ Launching PentestGPT Enhanced...")
        print("Features:")
        print("  ‚úì Comprehensive detail display")
        print("  ‚úì Multiple tabs for different scan phases")
        print("  ‚úì Autonomous scanning mode")
        print("  ‚úì Auto-exploitation capabilities")
        print("  ‚úì Continuous monitoring")
        print("  ‚úì Full reporting")
        
        try:
            subprocess.run([sys.executable, "pentestgpt_enhanced.py"])
        except Exception as e:
            print(f"Error: {e}")
            print("Alternative: Try pentestgpt_ultimate.py")
            
    def run_ultimate_gui(self):
        """Run the ultimate GUI"""
        print("\nüöÄ Launching PentestGPT Ultimate...")
        try:
            subprocess.run([sys.executable, "pentestgpt_ultimate.py"])
        except Exception as e:
            print(f"Error: {e}")
            
    def run_ai_gui(self):
        """Run the AI GUI"""
        print("\nüöÄ Launching AI Pentest GUI...")
        try:
            subprocess.run([sys.executable, "ai_pentest_gui.py"])
        except Exception as e:
            print(f"Error: {e}")
            
    def run_chat_gui(self):
        """Run the chat GUI"""
        print("\nüöÄ Launching Chat Interface...")
        try:
            # Try the main chat command first
            subprocess.run([sys.executable, "-m", "src.main", "chat"])
        except Exception as e:
            print(f"Trying alternative launcher...")
            try:
                subprocess.run([sys.executable, "launch_chat.py"])
            except:
                print("Chat interface not available")
                
    def run_autonomous(self):
        """Run autonomous mode"""
        print("\nü§ñ Autonomous Pentesting Mode")
        print("This mode runs completely automatically with minimal human intervention.\n")
        
        target = input("Enter target (e.g., testphp.vulnweb.com): ").strip()
        if target:
            cmd = f"python3 -m src.main autonomous {target} --learning --self-healing"
            print(f"\nRunning: {cmd}")
            subprocess.run(cmd, shell=True)
            
    def run_copilot(self):
        """Run copilot mode"""
        print("\nü§ñ Copilot Mode - Natural Language Pentesting")
        print("Describe what you want to do in plain English.\n")
        
        task = input("What do you want to test? (e.g., 'scan example.com for SQL injection'): ").strip()
        if task:
            cmd = f"python3 -m src.main copilot '{task}'"
            print(f"\nRunning: {cmd}")
            subprocess.run(cmd, shell=True)
            
    def run_redteam(self):
        """Run red team mode"""
        print("\nüéØ Red Team Engagement Mode")
        print("Simulates a full red team engagement.\n")
        
        target = input("Enter target: ").strip()
        if target:
            cmd = f"python3 -m src.main redteam {target} --operation full"
            print(f"\nRunning: {cmd}")
            subprocess.run(cmd, shell=True)
            
    def check_config(self):
        """Check system configuration"""
        print("\nüîç Checking System Configuration...")
        subprocess.run([sys.executable, "-m", "src.main", "--config-check"])
        
    def show_docs(self):
        """Show documentation"""
        print("\nüìö Documentation and Examples:\n")
        
        print("BASIC USAGE:")
        print("-"*40)
        print("1. Quick Scan:")
        print("   python3 -m src.main scan testphp.vulnweb.com --quick")
        
        print("\n2. Comprehensive Scan:")
        print("   python3 -m src.main scan testphp.vulnweb.com --comprehensive")
        
        print("\n3. Reconnaissance Only:")
        print("   python3 -m src.main recon testphp.vulnweb.com")
        
        print("\n4. Vulnerability Scan:")
        print("   python3 -m src.main vuln testphp.vulnweb.com")
        
        print("\n5. Web Application Testing:")
        print("   python3 -m src.main web http://testphp.vulnweb.com")
        
        print("\n6. Network Assessment:")
        print("   python3 -m src.main network 192.168.1.0/24")
        
        print("\n7. Generate Report:")
        print("   python3 -m src.main report scan_results.json")
        
        print("\nADVANCED FEATURES:")
        print("-"*40)
        print("‚Ä¢ Autonomous Mode: Fully automated scanning and exploitation")
        print("‚Ä¢ AI-Powered: Machine learning for vulnerability prioritization")
        print("‚Ä¢ Continuous Learning: System learns from each scan")
        print("‚Ä¢ Self-Healing: Automatic error recovery")
        print("‚Ä¢ Multi-Tool Integration: Nmap, Nuclei, SQLMap, Nikto, etc.")
        
        print("\nWHICH INTERFACE TO USE?")
        print("-"*40)
        print("‚Ä¢ For automation/scripting: Use CLI (option 1)")
        print("‚Ä¢ For detailed analysis: Use Enhanced GUI (option 2)")
        print("‚Ä¢ For beginners: Use Chat GUI (option 5)")
        print("‚Ä¢ For red teaming: Use Red Team mode (option 8)")
        
    def run(self):
        """Main launcher loop"""
        while True:
            self.display_menu()
            
            try:
                choice = input("\nEnter your choice [0-10]: ").strip()
                
                if choice == '0':
                    print("\nüëã Goodbye!")
                    sys.exit(0)
                elif choice == '1':
                    self.run_cli()
                elif choice == '2':
                    self.run_enhanced_gui()
                elif choice == '3':
                    self.run_ultimate_gui()
                elif choice == '4':
                    self.run_ai_gui()
                elif choice == '5':
                    self.run_chat_gui()
                elif choice == '6':
                    self.run_autonomous()
                elif choice == '7':
                    self.run_copilot()
                elif choice == '8':
                    self.run_redteam()
                elif choice == '9':
                    self.check_config()
                elif choice == '10':
                    self.show_docs()
                else:
                    print("\n‚ùå Invalid choice. Please try again.")
                    
                input("\n\nPress Enter to continue...")
                
            except KeyboardInterrupt:
                print("\n\nüëã Goodbye!")
                sys.exit(0)
            except Exception as e:
                print(f"\n‚ùå Error: {e}")
                input("\nPress Enter to continue...")


if __name__ == "__main__":
    launcher = PentestLauncher()
    launcher.run()
